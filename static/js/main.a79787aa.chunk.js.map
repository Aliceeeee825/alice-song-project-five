{"version":3,"sources":["component/Header.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Main","appendCell","i","content","cellGenerator","push","className","key","weekdays","timeslots","8","9","10","11","12","13","14","15","16","17","18","19","20","counter","map","cell","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAYeA,G,uLARP,OACI,gCACI,gD,GAJKC,cCsDNC,E,iLAzCP,IAXA,IAAMC,EAAc,SAACC,EAAGC,GACpBC,EAAcC,KACV,yBAAKC,UAAS,gBAAaJ,EAAb,SAAuBK,IAAKL,GAAIC,KAIhDC,EAAgB,GAChBI,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACtDC,EAAY,CAACC,EAAE,OAAQC,EAAE,OAAQC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,QAASC,GAAG,SAE9JC,EAAU,EACLrB,EAAI,EAAGA,GAAK,IAAKA,IAGlB,GAAGA,GAAKA,GAAG,EACXD,EAAWC,EAAGM,EAAUN,EAAE,IAIpBA,EAAI,IAAM,GAAKA,EAAI,GAAW,IAANA,GAC1BD,EAAWC,EAAGO,EAAUc,IACxBA,KAGAtB,EAAWC,EAAG,MAiB1B,OACI,yBAAKI,UAAY,YACZF,EAAcoB,KAAI,SAACC,GAChB,OAAOA,U,GA9CR1B,aCeJ2B,E,iLATX,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUP,aCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a79787aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Time Logger</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\n\r\nclass Main extends Component{\r\n    render(){\r\n        const appendCell = ((i, content)=>{\r\n            cellGenerator.push(\r\n                <div className = {`cellNo${i} cell`} key={i}>{content}</div>\r\n            )\r\n        })\r\n\r\n        const cellGenerator = [];\r\n        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        const timeslots = {8:'8:00', 9:'9:00', 10:'10:00', 11:'11:00', 12:'12:00', 13:'13:00', 14:'14:00', 15:'15:00', 16:'16:00', 17:'17:00', 18:'18:00', 19:'19:00', 20:'20:00'}\r\n        // const timeslots = [ '8:00',  '9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00' ]\r\n        let counter = 8;\r\n        for (let i = 0; i <= 111; i++) {\r\n            // 8*13 = 104\r\n            // console.log(i%7===1)\r\n            if (1<=i && i<=7){\r\n                appendCell(i, weekdays[(i-1)])\r\n                // console.log(i)\r\n            }\r\n            else{\r\n                if ( (i % 8 === 0 && i > 8)|| i === 8) {\r\n                    appendCell(i, timeslots[counter])\r\n                    counter ++\r\n                }\r\n                else{\r\n                    appendCell(i, 'hi')\r\n                }\r\n            }\r\n            // else if (i % 7 === 1){\r\n            //     // 8 15\r\n            //     console.log(i)\r\n            //     for (let index = 8; i<=20; i++){\r\n            //         // appendCell(i, timeslots[index])\r\n            //         // appendCell(i, time)\r\n            //         console.log(index)\r\n            //     }\r\n            // }\r\n            // else{\r\n            //     appendCell(i, '')\r\n            // }\r\n        }\r\n\r\n        return(\r\n            <div className = \"calendar\">\r\n                {cellGenerator.map((cell) => {\r\n                    return cell\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './component/Header';\nimport Main from './component/Main'\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}