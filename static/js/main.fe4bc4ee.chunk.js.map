{"version":3,"sources":["assets/homeLogo.svg","assets/calendarLogo.svg","assets/registerLogo.svg","component/Home.js","firebase.js","component/Login.js","component/Register.js","component/Header.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","to","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","Login","GoogleAuthProvider","handleChange","e","setState","target","name","value","login","preventDefault","email","state","password","signInWithEmailAndPassword","then","result","window","location","replace","catch","error","code","alert","Message","onAuthStateChanged","user","console","log","logout","signOut","calendarLogo","action","onSubmit","this","checkStatus","htmlFor","type","id","onChange","placeholder","onClick","Register","submitRegister","confirmedPassword","createUserWithEmailAndPassword","registerLogo","Header","Main","newEventHandler","document","querySelector","classList","toggle","removeAll","dbRef","database","ref","confirm","remove","reload","addLogHandler","day","startTime","note","endTime","push","color","listOfItem","length","forEach","item","duration","hour","Number","style","backgroundColor","innerHTML","listOfLogs","on","response","dataFromDb","val","stateToBeSet","key","logDetail","userEmail","props","appendCell","i","content","cellGenerator","weekdays","counter","Math","floor","formDateToApend","formDate","startTimeToAppend","formStartTime","endTimeToAppend","formEndTime","map","cell","required","time","maxLength","App","basename","path","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fe4bc4ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeLogo.d1720d81.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendarLogo.4db167f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/registerLogo.e013f98b.svg\";","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport logo from '../assets/homeLogo.svg';\r\n\r\n\r\n\r\nclass Home extends Component{\r\n    constructor(){\r\n        super();\r\n        \r\n    };\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"homeHead\">\r\n                    <div className=\"homeLogo\">\r\n                        <img src={logo} alt=\"A rabbit inspired by Alice in wonderland. cr to Max Jiang\"/>\r\n                    </div>\r\n    \r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to= \"/login\">Login</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to='/register'>Register</Link>\r\n                            </li>\r\n                            {/* <li>\r\n                                <Link to='/main'>Main</Link>\r\n                            </li> */}\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n\r\n                <h1 className=\"logo-mask\">TIME LOGGER</h1>\r\n                <h2>A handy tool that helps you track your time</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import firebase from 'firebase';\r\n\r\n\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyB5w34JU6hU2W5vXRqgHfUa5a9f2t9Gubc\",\r\n      authDomain: \"timelogger-9717c.firebaseapp.com\",\r\n      databaseURL: \"https://timelogger-9717c.firebaseio.com\",\r\n      projectId: \"timelogger-9717c\",\r\n      storageBucket: \"timelogger-9717c.appspot.com\",\r\n      messagingSenderId: \"690201323203\",\r\n      appId: \"1:690201323203:web:e77af9fcda00e5d5476476\",\r\n      measurementId: \"G-9HLWMDP6XK\"\r\n    }\r\n\r\n      // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase;","import React, { Component } from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport firebase from '../firebase';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n// import Header from './Header';\r\n// import Main from './Main'\r\n\r\nimport calendarLogo from '../assets/calendarLogo.svg'\r\n\r\n//sample email and pw\r\n// sample@alice.com\r\n// abc123\r\n// const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nclass Login extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    \r\n\r\n\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const email = this.state.email;\r\n        const password = this.state.password;\r\n\r\n        auth.signInWithEmailAndPassword(email, password).then((result) => {\r\n            window.location.replace(\"/main\");\r\n            // return <Redirect to= '/main' />\r\n            }).catch((error) => {\r\n                const errorCode = error.code\r\n                alert(error.Message)\r\n            })\r\n\r\n        auth.onAuthStateChanged(user => {\r\n            console.log(user)\r\n            this.setState({\r\n                user\r\n            }, () => {\r\n                this.setState({\r\n                    user\r\n                });\r\n                // window.redirect/\r\n            });\r\n                // <Router>\r\n                //     <Switch>\r\n                //         <Route path=\"main\">\r\n                //             <Header />\r\n                //             <Main />\r\n                //         </Route>\r\n                //     </Switch>\r\n                // </Router>\r\n            \r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        auth.signOut()\r\n            .then(() => {\r\n                this.setState({\r\n                    user: null\r\n                });\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        auth.onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({ user });\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        //firebase init\r\n        // const {\r\n        //     user,\r\n        //     signOut,\r\n        //     signInWithGoogle,\r\n        // } = this.props;\r\n\r\n        return(\r\n            <div className=\"loginPage\">\r\n                <div className=\"loginContent\">\r\n                    <div className=\"loginLogo\">\r\n                        <img src={calendarLogo} alt=\"A calendar with a check mark inside. Icon made by Free icons from www.freeicons.io\"/>\r\n                    </div>\r\n    \r\n                    <form action=\"GET\" className=\"loginForm\" onSubmit={this.checkStatus}>\r\n                        <h2>Welcome Back!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" onChange={this.handleChange} placeholder=\"sample@alice.com\"></input>\r\n    \r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange} placeholder=\"abc123\"></input>\r\n    \r\n                        <Link to=\"/register\">Don't have an account yet? Register here!</Link>\r\n\r\n                        {this.state.user ? <button onClick={this.login}>Log In</button> : <button onClick={this.logout}>Log Out</button>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// export default Login \r\n// try {\r\n//     const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n//     const firebaseAppAuth = firebaseApp.auth();\r\n//     const providers = {\r\n//         googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n//     };\r\n// } catch (err) {\r\n//     if (!/already exist/.test(err.message)) {\r\n//         console.error('Firebase initialization error', err.stack)\r\n//     }\r\n// }\r\n// const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n//     const firebaseAppAuth = firebaseApp.auth();\r\n//     const providers = {\r\n//         googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n//     };\r\n// export default withFirebaseAuth({\r\n//     providers,\r\n//     firebaseAppAuth,\r\n// })(Login);\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport firebase from '../firebase'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport registerLogo from '../assets/registerLogo.svg'\r\n\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nclass Register extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    // componentDidMount() {\r\n    //     auth.onAuthStateChanged((user) => {\r\n    //         if (user) {\r\n    //             this.setState({ user });\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    submitRegister = (e) => {\r\n        const email = this.state.email;\r\n        const password = this.state.password;\r\n        e.preventDefault();\r\n        if (this.state.password !== this.state.confirmedPassword){\r\n            alert('wrong password');\r\n        }\r\n\r\n        auth.createUserWithEmailAndPassword(email, password).then((result) => {\r\n        }).catch((error) => {\r\n            const errorCode = error.code\r\n            alert(error.Message)\r\n        })\r\n\r\n        // auth.onAuthStateChanged(user => {\r\n        //     console.log(user)\r\n        //     this.setState({\r\n        //         user\r\n        //     }, () => {\r\n        //         this.setState({\r\n        //             user\r\n        //         });\r\n        //         // window.redirect/\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    render(){\r\n\r\n        return(\r\n            <div className=\"registerPage\">\r\n                <div className=\"registerContent\">\r\n                    <div className=\"registerLogo\">\r\n                        <img src={registerLogo} alt=\"A calendar with a heart in the middle. Icon made by Free icons from www.freeicons.io\" />\r\n                    </div>\r\n\r\n                    <form action=\"GET\" className=\"registerForm\" onSubmit={this.submitRegister}>\r\n                        <h2>Hello Friend!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} ></input>\r\n\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}></input>\r\n\r\n                        <label htmlFor=\"confirmedPassword\">Confirmed Password</label>\r\n                        <input type=\"password\" id=\"confirmedPassword\" name=\"confirmedPassword\" value={this.state.confirmedPassword} onChange={this.handleChange}></input>\r\n\r\n                        <Link to=\"/login\">Already have an account? Sign in here!</Link>\r\n\r\n                        <button type=\"submit\">Register</button>\r\n                        {/* {this.state.user ? <button>Log Out</button> : <button >Log In</button>} */}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Time Logger</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\n\r\nclass Main extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            email: '',\r\n            listOfLogs: [],\r\n            day:  '',\r\n            startTime: '',\r\n            endTime: '',\r\n            note: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n\r\n            const stateToBeSet = []\r\n\r\n            for (let key in dataFromDb) {\r\n                const logDetail = {\r\n                    key: key,\r\n                    log: dataFromDb[key]\r\n                }\r\n                stateToBeSet.push(logDetail)\r\n            }\r\n\r\n            this.setState({\r\n                listOfLogs: stateToBeSet\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    // after clicking the plus button, the log form shows up\r\n    newEventHandler = () => {\r\n        let logDetail = document.querySelector('.logDetail');\r\n        logDetail.classList.toggle('hide')\r\n}\r\n\r\n    // after clicking the clear all button\r\n    removeAll = () => {\r\n        const dbRef = firebase.database().ref();\r\n        \r\n        if (window.confirm(\"Do you really want to clear everything on your schedule?\")){\r\n            dbRef.remove();\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    //after clicking add log, state update\r\n    addLogHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (!this.state.day || !this.state.startTime || !this.state.note){\r\n            alert('You need to fill in the day, start time and the end time')\r\n        }else{\r\n            let log = {\r\n                \"email\": this.state.email,\r\n                \"day\": this.state.day,\r\n                \"startTime\": this.state.startTime,\r\n                \"endTime\": this.state.endTime,\r\n                \"note\": this.state.note,\r\n            }\r\n            \r\n            //push the data to the firebase\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(log);\r\n            \r\n            //clear the note text input field\r\n            document.querySelector('.note').value = '';\r\n        }\r\n    }\r\n\r\n    \r\n    // when input change, record them\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    color = (listOfItem) => {\r\n        if (listOfItem.length > 0){\r\n            listOfItem.forEach((item) => {\r\n                const startTime = item.log.startTime;\r\n                const endTime = item.log.endTime;\r\n                const day = item.log.day\r\n                for (let duration = endTime - startTime - 1; duration >= 0; duration--) {\r\n                    let hour = Number(startTime) + duration\r\n                    document.querySelector('.cellNo' + hour + '-' + day).style.backgroundColor = \"#c5c1c0\";\r\n                    document.querySelector('.cellNo' + hour + '-' + day).innerHTML = item.log.note;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    \r\n    render(){\r\n        const userEmail = this.props.userEmail\r\n        console.log(userEmail)\r\n\r\n        this.color(this.state.listOfLogs)\r\n\r\n        //generate cells\r\n        const appendCell = ((i, content)=>{\r\n            cellGenerator.push(\r\n                <div className = {`cellNo${i} cell`} key={i}>{content}</div>\r\n            )\r\n        })\r\n\r\n        //give the calendar column and row names\r\n        const cellGenerator = [];\r\n        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let counter = 8;\r\n        for (let i = 0; i <= 111; i++) {\r\n            if (1<=i && i<=7){\r\n                // add days of week in\r\n                appendCell(i, weekdays[(i-1)])\r\n            }\r\n            else{\r\n                //add time period in\r\n                if ( (i % 8 === 0 && i > 8)|| i === 8) {\r\n                    appendCell(i, `${counter}:00`)\r\n                    counter ++;\r\n                }\r\n                else{\r\n                    // give coordinates to each cell \r\n                    let x = Math.floor(i/8);\r\n                    let y = i % 8;\r\n                    appendCell(x + \"-\" + y, ``)\r\n                }\r\n            }\r\n        }\r\n\r\n        // add options for form \r\n        let formDateToApend = [];\r\n        const formDate = (weekdays) => {\r\n            for (let i = 0; i <= 6; i++){\r\n                formDateToApend.push(<option key={`${weekdays[i]}`} value={`${i + 1}`} >{weekdays[i]}</option>)\r\n            }\r\n        }\r\n        formDate(weekdays)\r\n\r\n        let startTimeToAppend = [];\r\n        const formStartTime = () => {\r\n            for (let i = 1; i <= 13; i++){\r\n                startTimeToAppend.push(<option key={`${i+7}`} value={`${i}`} >{i+7}</option>)\r\n            }\r\n        }\r\n        formStartTime()\r\n\r\n        let endTimeToAppend = [];\r\n        const formEndTime = () => {\r\n            for (let i = 1; i <= 13; i++) {\r\n                if ((i+1) > this.state.startTime){\r\n                    endTimeToAppend.push(<option key={`${i + 8}`} value={`${i+1}`} >{i + 8}</option>)\r\n                }\r\n            }\r\n        }\r\n        formEndTime()\r\n        \r\n        return(\r\n            <div className=\"mainContent\">\r\n                <div className = \"calendar\">\r\n                    {cellGenerator.map((cell) => {\r\n                        return cell\r\n                    })\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"newLog\">\r\n                    <button className=\"newLogPlus\" onClick={this.newEventHandler}>+</button>\r\n                    <label className=\"visuallyhidden\">add a log</label>\r\n                </div>\r\n                <div className=\"clearAll\">\r\n                    <button className=\"clear\" onClick={this.removeAll}>Clear</button>\r\n                </div>\r\n\r\n                <div className=\"logDetail hide\">\r\n                    <h2>Add log</h2>\r\n                    {/* form start here */}\r\n                    <form action=\"GET\" onSubmit={this.addLogHandler} className=\"addLogForm\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <select onChange={this.handleChange} id=\"day\" name=\"day\" value={this.state.day} required>\r\n                            <option value=\"\">A day of the week</option>\r\n                            {\r\n                                formDateToApend.map((day) => {\r\n                                    return day\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"statTime\">Start time</label>\r\n                        <select onChange={this.handleChange} id=\"startTime\" name=\"startTime\" value={this.state.startTime} required>\r\n                            <option value=\"\">Start time</option>\r\n                            {\r\n                                startTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"endTime\">End time</label>\r\n                        <select onChange={this.handleChange} id=\"endTime\" name=\"endTime\" value={this.state.endTime} required>\r\n                            <option value=\"\">End time</option>\r\n                            {\r\n                                endTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"note\">Note</label>\r\n                        <input type=\"text\" name=\"note\" className=\"note\" value={this.state.note} onChange={this.handleChange} maxLength=\"15\"/>\r\n\r\n                        <button className=\"addLog\" htmlFor=\"submit\" onClick={this.addLogHandler} >Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\nimport './index.css'\n\nimport Home from './component/Home';\nimport Login from './component/Login';\nimport Register from './component/Register';\nimport Header from './component/Header';\nimport Main from './component/Main'\n\nclass App extends Component {\n  render(){\n    return (\n      <Router basename=\"/\">\n        <div className=\"App\">\n          <Switch>\n            <Route path='/login'>\n              <Login />\n            </Route>\n\n            <Route path='/register'>\n              <Register />\n            </Route>\n\n            <Route path='/main'>\n              <Header />\n              <Main />\n            </Route>\n\n            <Route path='/'>\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}