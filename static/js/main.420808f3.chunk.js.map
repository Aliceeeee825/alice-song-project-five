{"version":3,"sources":["assets/homeLogo.svg","assets/calendarLogo.svg","assets/registerLogo.svg","component/Home.js","firebase.js","component/Login.js","component/Register.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","to","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","Login","handleChange","e","setState","target","name","value","checkStatus","email","password","Swal","fire","title","text","icon","confirmButtonText","signInWithEmailAndPassword","then","result","redirect","catch","error","message","onAuthStateChanged","user","getEmail","props","login","preventDefault","state","logout","signOut","window","location","replace","renderRedirect","guest","this","calendarLogo","action","onSubmit","htmlFor","type","id","onChange","placeholder","required","href","onClick","Register","submitRegister","confirmedPassword","createUserWithEmailAndPassword","registerLogo","Main","retriveData","database","ref","on","response","dataFromDb","val","stateToBeSet","key","logDetail","log","userEmail","push","listOfLogs","newEventHandler","document","querySelector","classList","toggle","removeAll","dbRef","showCancelButton","confirmButtonColor","cancelButtonColor","remove","cellGenerator","generateCell","addLogHandler","day","startTime","endTime","note","handleStartChange","endTimeToAppend","formEndTime","color","listOfItem","length","forEach","item","Number","duration","hour","style","backgroundColor","innerHTML","appendCell","i","content","weekdays","counter","x","Math","floor","y","formDate","formDateToApend","formStartTime","startTimeToAppend","map","cell","time","maxLength","App","basename","path","render","component","exact","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.420808f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeLogo.f09b46dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendarLogo.3aa471d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/registerLogo.1a5af44a.svg\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../assets/homeLogo.svg';\r\n\r\n\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"homeHead\">\r\n                    <div className=\"homeLogo\">\r\n                        <img src={logo} alt=\"A rabbit inspired by Alice in wonderland. cr to Max Jiang\"/>\r\n                    </div>\r\n    \r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to= \"/login\">Login</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to='/register'>Register</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n\r\n                <div className=\"homeText\">\r\n                    <h1>TIME LOGGER</h1>\r\n                    <h2>A handy tool that helps you track your time</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import firebase from 'firebase';\r\n\r\n\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyB5w34JU6hU2W5vXRqgHfUa5a9f2t9Gubc\",\r\n      authDomain: \"timelogger-9717c.firebaseapp.com\",\r\n      databaseURL: \"https://timelogger-9717c.firebaseio.com\",\r\n      projectId: \"timelogger-9717c\",\r\n      storageBucket: \"timelogger-9717c.appspot.com\",\r\n      messagingSenderId: \"690201323203\",\r\n      appId: \"1:690201323203:web:e77af9fcda00e5d5476476\",\r\n      measurementId: \"G-9HLWMDP6XK\"\r\n    }\r\n\r\n      // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase;","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\nimport calendarLogo from '../assets/calendarLogo.svg'\r\n\r\nconst auth = firebase.auth()\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n            redirect: false\r\n        }\r\n    }\r\n\r\n    //get user input and store them in the state\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    checkStatus = (email, password) => {\r\n        if(email === '' || password === ''){\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'Please put your email and password here',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n            })\r\n        }else{\r\n            auth.signInWithEmailAndPassword(email, password).then((result) => {\r\n                this.setState({\r\n                    redirect: true\r\n                })\r\n            }).catch((error) => {\r\n                // alert(error.message)\r\n                Swal.fire({\r\n                    title: 'Error!',\r\n                    text: error.message,\r\n                    icon: 'error',\r\n                    confirmButtonText: 'Cool'\r\n                })\r\n            })\r\n    \r\n            auth.onAuthStateChanged(user => {\r\n                this.setState({\r\n                    user,\r\n                    email,\r\n                    password\r\n                }, () => {\r\n                    const {\r\n                        getEmail\r\n                    } = this.props;\r\n    \r\n                    getEmail(email, user)\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n    \r\n    //when the user is not null, log in\r\n    login = (e) => {\r\n        e.preventDefault();\r\n\r\n        const email = this.state.email;\r\n        const password = this.state.password;\r\n        \r\n        this.checkStatus(email, password)\r\n    }\r\n\r\n    //when the user is not null in the state, reset it to null\r\n    logout = () => {\r\n        auth.signOut()\r\n            .then(() => {\r\n                this.setState({\r\n                    user: null\r\n                });\r\n                window.location.replace('/login')\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        auth.onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({ user });\r\n            }\r\n        });\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if (this.state.redirect){\r\n            return <Redirect to={`/main`}></Redirect>\r\n        }else{\r\n            return <Redirect to='/login'></Redirect>\r\n        }\r\n    }\r\n\r\n    guest = () => {\r\n        const email = 'guest@guest.com'\r\n        const password = 'guests'\r\n\r\n        this.checkStatus(email,password)\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"loginPage\">\r\n                {this.renderRedirect()}\r\n                <div className=\"loginContent\">\r\n                    <div className=\"loginLogo\">\r\n                        <img src={calendarLogo} alt=\"A calendar with a check mark inside. Icon made by Free icons from www.freeicons.io\"/>\r\n                    </div>\r\n    \r\n                    <form action=\"GET\" className=\"loginForm\" onSubmit={this.checkStatus}>\r\n                        <h2>Welcome Back!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" onChange={this.handleChange} placeholder=\"sample@alice.com\" required></input>\r\n    \r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange} placeholder=\"abc123\" required></input>\r\n    \r\n                        <Link to=\"/register\">Don't have an account yet? Register here!</Link>\r\n\r\n                        {/* <Link onClick={this.guest}\r\n                        to=\"/main\">Or continue as a guest</Link> */}\r\n                        <a href=\"#\" onClick={this.guest}>Or continue as a guest</a>\r\n\r\n                        <button onClick={this.login}>Log In</button>\r\n                        {/* {!this.state.user ? <button onClick={this.login}>Log In</button> : <button onClick={this.logout}>Log Out</button>} */}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport firebase from '../firebase'\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\nimport registerLogo from '../assets/registerLogo.svg'\r\n\r\nconst auth = firebase.auth()\r\n\r\nclass Register extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n            redirect: false,\r\n        }\r\n    };\r\n    // grab the user input and save them to the state\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //handle submit event\r\n    submitRegister = (e) => {\r\n        e.preventDefault();\r\n        //get the user email\r\n        const email = this.state.email;\r\n        const password = this.state.password;\r\n        //verify whether the confirmed password is the same as the password\r\n        if (this.state.password !== this.state.confirmedPassword){\r\n            // alert('The confirmed password does not match the password');\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'The confirmed password does not match the password',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n            })\r\n        }else{\r\n            //create the email and password in the firebase and redirect to the main page\r\n            auth.createUserWithEmailAndPassword(email, password).then((result) => {\r\n                // window.location.replace('/main')\r\n                this.setState({\r\n                    redirect: true,\r\n                })\r\n            }).catch((error) => {\r\n                //error handling\r\n                // alert(error.message)\r\n                Swal.fire({\r\n                    title: 'Error!',\r\n                    text: error.message,\r\n                    icon: 'error',\r\n                    confirmButtonText: 'Cool'\r\n                })\r\n            })\r\n    \r\n            //update the state\r\n            auth.onAuthStateChanged((user) => {\r\n                this.setState({\r\n                    user\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if (this.state.redirect) {\r\n            return <Redirect to={`/login`}></Redirect>\r\n        } else {\r\n            return <Redirect to='/register'></Redirect>\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"registerPage\">\r\n                {this.renderRedirect()}\r\n                <div className=\"registerContent\">\r\n                    <div className=\"registerLogo\">\r\n                        <img src={registerLogo} alt=\"A calendar with a heart in the middle. Icon made by Free icons from www.freeicons.io\" />\r\n                    </div>\r\n\r\n                    <form action=\"GET\" className=\"registerForm\" onSubmit={this.submitRegister}>\r\n                        <h2>Hello Friend!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} required></input>\r\n\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required></input>\r\n\r\n                        <label htmlFor=\"confirmedPassword\">Confirmed Password</label>\r\n                        <input type=\"password\" id=\"confirmedPassword\" name=\"confirmedPassword\" value={this.state.confirmedPassword} onChange={this.handleChange} required></input>\r\n\r\n                        <Link to=\"/login\">Already have an account? Sign in here!</Link>\r\n\r\n                        <button type=\"submit\">Register</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","//need to figure out how to associate the data I passed to firebase and the email address from the log in page so that the user can actually use their own account.\r\nimport React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super();\r\n\r\n        this.state = {\r\n            listOfLogs: [],\r\n            day:  '',\r\n            startTime: '',\r\n            endTime: '',\r\n            note: '',\r\n            redirect: false,\r\n            email: props.userEmail,\r\n            cellGenerator: [],\r\n            weekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n            formDateToApend: [],\r\n            startTimeToAppend: [],\r\n            endTimeToAppend:[],\r\n        }\r\n    }\r\n\r\n    retriveData = () =>{\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n\r\n            const stateToBeSet = []\r\n\r\n            for (let key in dataFromDb) {\r\n                const logDetail = {\r\n                    key: key,\r\n                    log: dataFromDb[key]\r\n                }\r\n                if (logDetail.log.email === this.props.userEmail) {\r\n                    stateToBeSet.push(logDetail)\r\n                }\r\n            }\r\n            this.setState({\r\n                listOfLogs: stateToBeSet\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        if (this.props.userEmail ){\r\n            this.generateCell()\r\n            this.retriveData()\r\n            this.formDate(this.state.weekdays)\r\n            this.formStartTime()\r\n            \r\n        } else{\r\n            this.setState({\r\n                redirect: true\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.color(this.state.listOfLogs)\r\n    }\r\n    // after clicking the plus button, the log form shows up\r\n    newEventHandler = () => {\r\n        let logDetail = document.querySelector('.logDetail');\r\n        logDetail.classList.toggle('hide')\r\n}\r\n\r\n    // after clicking the clear all button\r\n    removeAll = () => {\r\n        const dbRef = firebase.database().ref();\r\n\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"Do you really want to clear everything on your schedule?\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, delete it!'\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                dbRef.remove();\r\n                this.setState({\r\n                    cellGenerator: []\r\n                }, () => {\r\n                    this.generateCell()\r\n                })\r\n                Swal.fire(\r\n                    'Deleted!',\r\n                    'Your file has been deleted.',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if (this.state.redirect) {\r\n            return <Redirect to='/login'></Redirect>\r\n        }\r\n    }\r\n\r\n    //after clicking add log, state update\r\n    addLogHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (!this.state.day || !this.state.startTime || !this.state.endTime){\r\n            // alert('You need to fill in the day, start time and the end time')\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'You need to fill in the day, start time and the end time',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n            })\r\n        }\r\n        else{\r\n            let log = {\r\n                \"email\": this.props.userEmail,\r\n                \"day\": this.state.day,\r\n                \"startTime\": this.state.startTime,\r\n                \"endTime\": this.state.endTime,\r\n                \"note\": this.state.note,\r\n            }\r\n            \r\n            //push the data to the firebase\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(log);\r\n            \r\n            //clear the note text input field\r\n            document.querySelector('.note').value = '';\r\n        }\r\n    }\r\n\r\n    \r\n    // when input change, record them\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleStartChange = (e) => {\r\n        this.setState({\r\n            startTime:e.target.value,\r\n            endTimeToAppend: []\r\n        }, () => {\r\n            this.formEndTime()\r\n        })\r\n    }\r\n    \r\n    //grab the information from firebase and color corresponding cells\r\n    color = (listOfItem) => {\r\n        if (listOfItem.length > 0){\r\n            listOfItem.forEach((item) => {\r\n                const startTime = item.log.startTime;\r\n                const endTime = item.log.endTime;\r\n                const day = Number(item.log.day)\r\n                for (let duration = endTime - startTime - 1; duration >= 0; duration--) {\r\n                    let hour = Number(startTime) + duration\r\n                    document.querySelector('.cellNo' + hour + '-' + day).style.backgroundColor = \"#c5c1c0\";\r\n                    document.querySelector('.cellNo' + hour + '-' + day).innerHTML = item.log.note;\r\n                }\r\n            })\r\n        }\r\n        else if (listOfItem.length === 0){\r\n        }\r\n    }\r\n\r\n    appendCell = ((i, content) => {\r\n        let cellGenerator = this.state.cellGenerator\r\n        cellGenerator.push(<div className={`cellNo${i} cell`} key={i} >{content}</div>)\r\n        this.setState({\r\n            cellGenerator: cellGenerator\r\n        })\r\n    })\r\n\r\n    //give the calendar column and row names\r\n    generateCell = () =>{\r\n        const weekdays = this.state.weekdays\r\n        let counter = 8\r\n        for (let i = 0; i <= 111; i++) {\r\n            if (1 <= i && i <= 7) {\r\n                // add days of week in\r\n                this.appendCell(i, weekdays[(i - 1)])\r\n            }\r\n            else {\r\n                //add time period in\r\n                if ((i % 8 === 0 && i > 8) || i === 8) {\r\n                    this.appendCell(i, `${counter}:00`)\r\n                    counter ++ \r\n                }\r\n                else {\r\n                    // give coordinates to each cell \r\n                    let x = Math.floor(i / 8);\r\n                    let y = i % 8;\r\n                    this.appendCell(x + \"-\" + y, ``)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // add options for form \r\n    formDate = (weekdays) => {\r\n        for (let i = 0; i <= 6; i++) {\r\n            let formDateToApend = this.state.formDateToApend\r\n            formDateToApend.push(<option key={`${weekdays[i]}`} value={`${i + 1}`} >{weekdays[i]}</option>)\r\n            this.setState({\r\n                formDateToApend: formDateToApend\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\n    formStartTime = () => {\r\n        for (let i = 1; i <= 13; i++) {\r\n            let startTimeToAppend = this.state.startTimeToAppend\r\n            startTimeToAppend.push(<option key={`${i + 7}`} value={`${i}`} >{i + 7}</option>)\r\n            this.setState({\r\n                startTimeToAppend: startTimeToAppend\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\n    formEndTime = () => {\r\n        for (let i = 1; i <= 13; i++) {\r\n            if ((i + 1) > this.state.startTime) {\r\n                let endTimeToAppend = this.state.endTimeToAppend\r\n                endTimeToAppend.push(<option key={`${i + 8}`} value={`${i + 1}`} >{i + 8}</option>)\r\n                this.setState({\r\n                    endTimeToAppend: endTimeToAppend\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        //generate cells\r\n        \r\n        return(\r\n            <div className=\"mainContent\">\r\n                {this.renderRedirect()}\r\n                <header>\r\n                    <h1>Time Logger</h1>\r\n                    <Link to=\"/\">Log Out</Link>\r\n\r\n                </header>\r\n                <div className = \"calendar\">\r\n                    {/* {this.renderRedirect()} */}\r\n                    {this.state.cellGenerator.map((cell) => {\r\n                        return cell\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"newLog\">\r\n                    <button className=\"newLogPlus\" onClick={this.newEventHandler}>+</button>\r\n                    <label className=\"visuallyhidden\">add a log</label>\r\n                </div>\r\n                <div className=\"clearAll\">\r\n                    <button className=\"clear\" onClick={this.removeAll}>Clear</button>\r\n                </div>\r\n\r\n                <div className=\"logDetail hide\">\r\n                    <h2>Add log</h2>\r\n                    {/* form start here */}\r\n                    <form action=\"GET\" onSubmit={this.addLogHandler} className=\"addLogForm\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <select onChange={this.handleChange} id=\"day\" name=\"day\" value={this.state.day} required>\r\n                            <option value=\"\">A day of the week</option>\r\n                            {\r\n                                this.state.formDateToApend.map((day) => {\r\n                                    return day\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"statTime\">Start time</label>\r\n                        <select onChange={this.handleStartChange} id=\"startTime\" name=\"startTime\" value={this.state.startTime} required>\r\n                            <option value=\"\">Start time</option>\r\n                            {\r\n                                this.state.startTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"endTime\">End time</label>\r\n                        <select onChange={this.handleChange} id=\"endTime\" name=\"endTime\" value={this.state.endTime} required>\r\n                            <option value=\"\">End time</option>\r\n                            {\r\n                                this.state.endTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"note\">Note</label>\r\n                        <input type=\"text\" name=\"note\" className=\"note\" value={this.state.note} onChange={this.handleChange} maxLength=\"15\"/>\r\n\r\n                        <button className=\"addLog\" htmlFor=\"submit\" onClick={this.addLogHandler} >Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\nimport './index.css'\r\n\r\nimport Home from './component/Home';\r\nimport Login from './component/Login';\r\nimport Register from './component/Register';\r\nimport Main from './component/Main'\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n\r\n    this.state = {\r\n      userEmail: '',\r\n      user:'',\r\n    }\r\n  }\r\n\r\n  getEmail = (email, user) => {\r\n    this.setState({\r\n      userEmail: email,\r\n      user: user\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Router basename=\"/\">\r\n        <div className=\"App\">\r\n          {/* <Switch> */}\r\n            <Route path='/login' render={() => <Login getEmail = {this.getEmail}/> }/>\r\n            <Route path='/register' component={Register} />\r\n            <Route path='/main' render={() => <Main userEmail ={this.state.userEmail} user={this.state.user}/> }/>\r\n            <Route path='/' component={Home} exact/>\r\n          {/* </Switch> */}\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}