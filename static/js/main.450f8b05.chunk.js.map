{"version":3,"sources":["assets/homeLogo.svg","assets/calendarLogo.svg","assets/registerLogo.svg","component/Home.js","firebase.js","component/Header.js","component/Main.js","component/Login.js","component/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","href","to","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Header","Main","newEventHandler","document","querySelector","classList","toggle","removeAll","dbRef","database","ref","window","confirm","remove","location","reload","addLogHandler","e","preventDefault","state","day","startTime","note","log","email","endTime","push","value","alert","handleChange","setState","target","name","color","listOfItem","length","forEach","item","duration","hour","Number","style","backgroundColor","innerHTML","listOfLogs","on","response","dataFromDb","val","stateToBeSet","key","logDetail","this","appendCell","i","content","cellGenerator","weekdays","counter","Math","floor","formDateToApend","formDate","startTimeToAppend","formStartTime","endTimeToAppend","formEndTime","map","cell","onClick","action","onSubmit","htmlFor","onChange","id","required","time","type","maxlength","auth","Login","GoogleAuthProvider","login","password","signInWithEmailAndPassword","then","result","catch","error","code","Message","onAuthStateChanged","user","console","logout","signOut","calendarLogo","checkStatus","Register","submitRegister","confirmedPassword","registerLogo","placeholder","App","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.450f8b05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeLogo.d1720d81.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendarLogo.4db167f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/registerLogo.e013f98b.svg\";","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport logo from '../assets/homeLogo.svg';\r\n\r\n\r\n\r\nclass Home extends Component{\r\n    constructor(){\r\n        super();\r\n        \r\n    };\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"homeHead\">\r\n                    <div className=\"homeLogo\">\r\n                        <img src={logo} alt=\"A rabbit inspired by Alice in wonderland. cr to Max Jiang\"/>\r\n                    </div>\r\n    \r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <a href = \"/login\">Login</a>\r\n                            </li>\r\n                            <li>\r\n                                <Link to='/register'>Register</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n\r\n                <h1 className=\"logo-mask\">TIME LOGGER</h1>\r\n                <h2>A handy tool that helps you track your time</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import firebase from 'firebase';\r\n\r\n\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyB5w34JU6hU2W5vXRqgHfUa5a9f2t9Gubc\",\r\n      authDomain: \"timelogger-9717c.firebaseapp.com\",\r\n      databaseURL: \"https://timelogger-9717c.firebaseio.com\",\r\n      projectId: \"timelogger-9717c\",\r\n      storageBucket: \"timelogger-9717c.appspot.com\",\r\n      messagingSenderId: \"690201323203\",\r\n      appId: \"1:690201323203:web:e77af9fcda00e5d5476476\",\r\n      measurementId: \"G-9HLWMDP6XK\"\r\n    }\r\n\r\n      // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Time Logger</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\n\r\nclass Main extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            email: 'alice',\r\n            listOfLogs: [],\r\n            day:  '',\r\n            startTime: '',\r\n            endTime: '',\r\n            note: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n\r\n            const stateToBeSet = []\r\n\r\n            for (let key in dataFromDb) {\r\n                const logDetail = {\r\n                    key: key,\r\n                    log: dataFromDb[key]\r\n                }\r\n                stateToBeSet.push(logDetail)\r\n            }\r\n\r\n            this.setState({\r\n                listOfLogs: stateToBeSet\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    // after clicking the plus button, the log form shows up\r\n    newEventHandler = () => {\r\n        let logDetail = document.querySelector('.logDetail');\r\n        logDetail.classList.toggle('hide')\r\n}\r\n\r\n    // after clicking the clear all button\r\n    removeAll = () => {\r\n        const dbRef = firebase.database().ref();\r\n        \r\n        if (window.confirm(\"Do you really want to clear everything on your schedule?\")){\r\n            dbRef.remove();\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    //after clicking add log, state update\r\n    addLogHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (!this.state.day || !this.state.startTime || !this.state.note){\r\n            alert('You need to fill in the day, start time and the end time')\r\n        }else{\r\n            let log = {\r\n                \"email\": this.state.email,\r\n                \"day\": this.state.day,\r\n                \"startTime\": this.state.startTime,\r\n                \"endTime\": this.state.endTime,\r\n                \"note\": this.state.note,\r\n            }\r\n            \r\n            //push the data to the firebase\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(log);\r\n            \r\n            //clear the note text input field\r\n            document.querySelector('.note').value = '';\r\n        }\r\n    }\r\n\r\n    \r\n    // when input change, record them\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    color = (listOfItem) => {\r\n        if (listOfItem.length > 0){\r\n            listOfItem.forEach((item) => {\r\n                const startTime = item.log.startTime;\r\n                const endTime = item.log.endTime;\r\n                const day = item.log.day\r\n                for (let duration = endTime - startTime - 1; duration >= 0; duration--) {\r\n                    let hour = Number(startTime) + duration\r\n                    document.querySelector('.cellNo' + hour + '-' + day).style.backgroundColor = \"#c5c1c0\";\r\n                    document.querySelector('.cellNo' + hour + '-' + day).innerHTML = item.log.note;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    \r\n    render(){\r\n        this.color(this.state.listOfLogs)\r\n\r\n        //generate cells\r\n        const appendCell = ((i, content)=>{\r\n            cellGenerator.push(\r\n                <div className = {`cellNo${i} cell`} key={i}>{content}</div>\r\n            )\r\n        })\r\n\r\n        //give the calendar column and row names\r\n        const cellGenerator = [];\r\n        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let counter = 8;\r\n        for (let i = 0; i <= 111; i++) {\r\n            if (1<=i && i<=7){\r\n                // add days of week in\r\n                appendCell(i, weekdays[(i-1)])\r\n            }\r\n            else{\r\n                //add time period in\r\n                if ( (i % 8 === 0 && i > 8)|| i === 8) {\r\n                    appendCell(i, `${counter}:00`)\r\n                    counter ++;\r\n                }\r\n                else{\r\n                    // give coordinates to each cell \r\n                    let x = Math.floor(i/8);\r\n                    let y = i % 8;\r\n                    appendCell(x + \"-\" + y, ``)\r\n                }\r\n            }\r\n        }\r\n\r\n        // add options for form \r\n        let formDateToApend = [];\r\n        const formDate = (weekdays) => {\r\n            for (let i = 0; i <= 6; i++){\r\n                formDateToApend.push(<option key={`${weekdays[i]}`} value={`${i + 1}`} >{weekdays[i]}</option>)\r\n            }\r\n        }\r\n        formDate(weekdays)\r\n\r\n        let startTimeToAppend = [];\r\n        const formStartTime = () => {\r\n            for (let i = 1; i <= 13; i++){\r\n                startTimeToAppend.push(<option key={`${i+7}`} value={`${i}`} >{i+7}</option>)\r\n            }\r\n        }\r\n        formStartTime()\r\n\r\n        let endTimeToAppend = [];\r\n        const formEndTime = () => {\r\n            for (let i = 1; i <= 13; i++) {\r\n                if ((i+1) > this.state.startTime){\r\n                    endTimeToAppend.push(<option key={`${i + 8}`} value={`${i+1}`} >{i + 8}</option>)\r\n                }\r\n            }\r\n        }\r\n        formEndTime()\r\n        \r\n        return(\r\n            <div className=\"mainContent\">\r\n                <div className = \"calendar\">\r\n                    {cellGenerator.map((cell) => {\r\n                        return cell\r\n                    })\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"newLog\">\r\n                    <button className=\"newLogPlus\" onClick={this.newEventHandler}>+</button>\r\n                    <label className=\"visuallyhidden\">add a log</label>\r\n                </div>\r\n                <div className=\"clearAll\">\r\n                    <button className=\"clear\" onClick={this.removeAll}>Clear</button>\r\n                </div>\r\n\r\n                <div className=\"logDetail hide\">\r\n                    <h2>Add log</h2>\r\n                    {/* form start here */}\r\n                    <form action=\"GET\" onSubmit={this.addLogHandler} className=\"addLogForm\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <select onChange={this.handleChange} id=\"day\" name=\"day\" value={this.state.day} required>\r\n                            <option value=\"\">A day of the week</option>\r\n                            {\r\n                                formDateToApend.map((day) => {\r\n                                    return day\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"statTime\">Start time</label>\r\n                        <select onChange={this.handleChange} id=\"startTime\" name=\"startTime\" value={this.state.startTime} required>\r\n                            <option value=\"\">Start time</option>\r\n                            {\r\n                                startTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"endTime\">End time</label>\r\n                        <select onChange={this.handleChange} id=\"endTime\" name=\"endTime\" value={this.state.endTime} required>\r\n                            <option value=\"\">End time</option>\r\n                            {\r\n                                endTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"note\">Note</label>\r\n                        <input type=\"text\" name=\"note\" className=\"note\" value={this.state.note} onChange={this.handleChange} maxlength=\"15\"/>\r\n\r\n                        <button className=\"addLog\" htmlFor=\"submit\" onClick={this.addLogHandler} >Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport firebase from '../firebase';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport Header from './Header';\r\nimport Main from './Main'\r\n\r\nimport calendarLogo from '../assets/calendarLogo.svg'\r\n\r\n//sample email and pw\r\n// sample@alice.com\r\n// abc123\r\n// const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nclass Login extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n        }\r\n    }\r\n\r\n    // handleChange = (e) => {\r\n    //     this.setState({\r\n    //         [e.target.name] : e.target.value\r\n    //     })\r\n\r\n    //     const email = document.querySelector('#email')\r\n    //     const password = document.querySelector('#password')\r\n\r\n    // }\r\n    \r\n\r\n\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const email = document.querySelector('#email').value\r\n        const password = document.querySelector('#password').value\r\n\r\n        auth.signInWithEmailAndPassword(email, password).then((result) => {\r\n            }).catch((error) => {\r\n                const errorCode = error.code\r\n                alert(error.Message)\r\n            })\r\n\r\n        auth.onAuthStateChanged(user => {\r\n            console.log(user)\r\n            this.setState({\r\n                user\r\n            }, () => {\r\n                this.setState({\r\n                    user\r\n                });\r\n\r\n                // {<Router>\r\n                //     <Switch>\r\n                //         <Route path=\"main\">\r\n                //             <Header />\r\n                //             <Main />\r\n                //         </Route>\r\n                //     </Switch>\r\n                // </Router>}\r\n            });\r\n            \r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        auth.signOut()\r\n            .then(() => {\r\n                this.setState({\r\n                    user: null\r\n                });\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        auth.onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({ user });\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        //firebase init\r\n        // const {\r\n        //     user,\r\n        //     signOut,\r\n        //     signInWithGoogle,\r\n        // } = this.props;\r\n\r\n        return(\r\n            <div className=\"loginPage\">\r\n                <div className=\"loginContent\">\r\n                    <div className=\"loginLogo\">\r\n                        <img src={calendarLogo} alt=\"A calendar with a check mark inside. Icon made by Free icons from www.freeicons.io\"/>\r\n                    </div>\r\n    \r\n                    <form action=\"GET\" className=\"loginForm\" onSubmit={this.checkStatus}>\r\n                        <h2>Welcome Back!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" onChange={this.handleChange}></input>\r\n    \r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange}></input>\r\n    \r\n                        <a href=\"/register\">Don't have an account yet? Register here!</a>\r\n\r\n                        {/* <button onClick={signInWithGoogle}>Sign in with Google</button> */}\r\n    \r\n                        {/* <button type=\"submit\">Login</button> */}\r\n                        {this.state.user ? <button onClick={this.login}>Log In</button> : <button onClick={this.logout}>Log Out</button>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// export default Login \r\n// try {\r\n//     const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n//     const firebaseAppAuth = firebaseApp.auth();\r\n//     const providers = {\r\n//         googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n//     };\r\n// } catch (err) {\r\n//     if (!/already exist/.test(err.message)) {\r\n//         console.error('Firebase initialization error', err.stack)\r\n//     }\r\n// }\r\n// const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n//     const firebaseAppAuth = firebaseApp.auth();\r\n//     const providers = {\r\n//         googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n//     };\r\n// export default withFirebaseAuth({\r\n//     providers,\r\n//     firebaseAppAuth,\r\n// })(Login);\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport firebase from '../firebase'\r\n// import firebaseConfig from '../firebase';\r\n// import 'firebase/auth';\r\n// import * as firebase from 'firebase/app';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport registerLogo from '../assets/registerLogo.svg'\r\nimport { findAllInRenderedTree } from 'react-dom/test-utils';\r\n\r\n// const auth = firebase.auth()\r\n// const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nclass Register extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        }\r\n    };\r\n //auth.createUser()\r\n    // login = () => {\r\n    //     auth.signInWithPopup(provider)\r\n    //         .then((result) => {\r\n    //             const user = result.user;\r\n    //             this.setState({\r\n    //                 user\r\n    //             });\r\n    //         });\r\n    // }\r\n\r\n    // logout = () => {\r\n    //     auth.signOut()\r\n    //         .then(() => {\r\n    //             this.setState({\r\n    //                 user: null\r\n    //             });\r\n    //         });\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     auth.onAuthStateChanged((user) => {\r\n    //         if (user) {\r\n    //             this.setState({ user });\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    submitRegister = (e) => {\r\n        e.preventDefault();\r\n        // firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then(res => {\r\n        //     if (res.user){\r\n        //         firebaseConfig.auth().setLoggedIn(true);\r\n        //         return <Redirect to='/login' />\r\n        //     }\r\n        // }).catch((e)=>{\r\n        //     console.log(e.message);\r\n        // })\r\n        if (this.state.password !== this.state.confirmedPassword){\r\n            alert('wrong password');\r\n            \r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        // const provider = new firebase.auth.GoogleAuthProvider();\r\n        // const auth = firebase.auth()\r\n\r\n        return(\r\n            <div className=\"registerPage\">\r\n                <div className=\"registerContent\">\r\n                    <div className=\"registerLogo\">\r\n                        <img src={registerLogo} alt=\"A calendar with a heart in the middle. Icon made by Free icons from www.freeicons.io\" />\r\n                    </div>\r\n\r\n                    <form action=\"GET\" className=\"registerForm\" onSubmit={this.submitRegister}>\r\n                        <h2>Hello Friend!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"sample@alice.com\"></input>\r\n\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} placeholder=\"abc123\"></input>\r\n\r\n                        <label htmlFor=\"confirmedPassword\">Confirmed Password</label>\r\n                        <input type=\"password\" id=\"confirmedPassword\" name=\"confirmedPassword\" value={this.state.confirmedPassword} onChange={this.handleChange}></input>\r\n\r\n                        <a href=\"/login\">Already have an account? Sign in here!</a>\r\n\r\n                        {/* <button type=\"submit\">Register</button> */}\r\n                        {this.state.user ? <button onClick={this.logout}>Log Out</button> : <button onClick={this.login}>Log In</button>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\n// import './App.css';\nimport './index.css'\n\nimport Home from './component/Home';\nimport Login from './component/Login';\nimport Register from './component/Register';\nimport Header from './component/Header';\nimport Main from './component/Main'\n\nclass App extends Component {\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          {/* <Switch> */}\n            {/* <Route path={process.env.PUBLIC_URL + '/login'}> */}\n            <Route path='/login'>\n              <Login />\n            </Route>\n\n            {/* <Route path={process.env.PUBLIC_URL + '/register'}> */}\n            <Route path='/register' component={Register} />\n              {/* <Register /> */}\n            {/* </Route> */}\n\n            {/* <Route path={process.env.PUBLIC_URL + '/main'}> */}\n            <Route path='/main'>\n              <Header />\n              <Main />\n            </Route>\n\n            <Route path='/'>\n              <Home />\n            </Route>\n          {/* </Switch> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}