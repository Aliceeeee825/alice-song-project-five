{"version":3,"sources":["assets/homeLogo.svg","assets/calendarLogo.svg","assets/registerLogo.svg","component/Home.js","firebase.js","component/Login.js","component/Register.js","component/Header.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","to","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","Login","handleChange","e","setState","target","name","value","login","preventDefault","email","state","password","signInWithEmailAndPassword","then","result","window","location","replace","catch","error","alert","message","onAuthStateChanged","user","logout","signOut","calendarLogo","action","onSubmit","this","checkStatus","htmlFor","type","id","onChange","placeholder","onClick","Register","submitRegister","confirmedPassword","createUserWithEmailAndPassword","registerLogo","Header","Main","newEventHandler","document","querySelector","classList","toggle","removeAll","dbRef","database","ref","confirm","remove","reload","addLogHandler","day","startTime","endTime","log","note","push","color","listOfItem","length","forEach","item","duration","hour","Number","style","backgroundColor","innerHTML","listOfLogs","on","response","dataFromDb","val","stateToBeSet","key","logDetail","appendCell","i","content","cellGenerator","weekdays","counter","Math","floor","formDateToApend","formDate","startTimeToAppend","formStartTime","endTimeToAppend","formEndTime","map","cell","required","time","maxLength","App","basename","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.c17ca2c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeLogo.d1720d81.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendarLogo.4db167f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/registerLogo.e013f98b.svg\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../assets/homeLogo.svg';\r\n\r\n\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"home\">\r\n                <div className=\"homeHead\">\r\n                    <div className=\"homeLogo\">\r\n                        <img src={logo} alt=\"A rabbit inspired by Alice in wonderland. cr to Max Jiang\"/>\r\n                    </div>\r\n    \r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to= \"/login\">Login</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to='/register'>Register</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n\r\n                <div className=\"homeText\">\r\n                    <h1>TIME LOGGER</h1>\r\n                    <h2>A handy tool that helps you track your time</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import firebase from 'firebase';\r\n\r\n\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyB5w34JU6hU2W5vXRqgHfUa5a9f2t9Gubc\",\r\n      authDomain: \"timelogger-9717c.firebaseapp.com\",\r\n      databaseURL: \"https://timelogger-9717c.firebaseio.com\",\r\n      projectId: \"timelogger-9717c\",\r\n      storageBucket: \"timelogger-9717c.appspot.com\",\r\n      messagingSenderId: \"690201323203\",\r\n      appId: \"1:690201323203:web:e77af9fcda00e5d5476476\",\r\n      measurementId: \"G-9HLWMDP6XK\"\r\n    }\r\n\r\n      // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase;","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport calendarLogo from '../assets/calendarLogo.svg'\r\n\r\nconst auth = firebase.auth()\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n        }\r\n    }\r\n\r\n    //get user input and store them in the state\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    \r\n    //when the user is not null, log in\r\n    login = (e) => {\r\n        e.preventDefault();\r\n\r\n        const email = this.state.email;\r\n        const password = this.state.password;\r\n        \r\n        //check the email and the password with firebase\r\n        auth.signInWithEmailAndPassword(email, password).then((result) => {\r\n            window.location.replace('/main')\r\n        }).catch((error) => {\r\n            alert(error.message)\r\n        })\r\n        \r\n        //when the authorization changes, reset the state\r\n        auth.onAuthStateChanged(user => {\r\n            this.setState({\r\n                user\r\n            });\r\n        })\r\n    }\r\n\r\n    //when the user is not null in the state, reset it to null\r\n    logout = () => {\r\n        auth.signOut()\r\n            .then(() => {\r\n                this.setState({\r\n                    user: null\r\n                });\r\n                window.location.replace('/login')\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        auth.onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({ user });\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"loginPage\">\r\n                <div className=\"loginContent\">\r\n                    <div className=\"loginLogo\">\r\n                        <img src={calendarLogo} alt=\"A calendar with a check mark inside. Icon made by Free icons from www.freeicons.io\"/>\r\n                    </div>\r\n    \r\n                    <form action=\"GET\" className=\"loginForm\" onSubmit={this.checkStatus}>\r\n                        <h2>Welcome Back!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" onChange={this.handleChange} placeholder=\"sample@alice.com\"></input>\r\n    \r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" onChange={this.handleChange} placeholder=\"abc123\"></input>\r\n    \r\n                        <Link to=\"/register\">Don't have an account yet? Register here!</Link>\r\n\r\n                        {this.state.user ? <button onClick={this.login}>Log In</button> : <button onClick={this.logout}>Log Out</button>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport firebase from '../firebase'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport registerLogo from '../assets/registerLogo.svg'\r\n\r\nconst auth = firebase.auth()\r\n\r\nclass Register extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            user: null,\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        }\r\n    };\r\n    // grab the user input and save them to the state\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //handle submit event\r\n    submitRegister = (e) => {\r\n        e.preventDefault();\r\n        //get the user email\r\n        const email = this.state.email;\r\n        const password = this.state.password;\r\n        //verify whether the confirmed password is the same as the password\r\n        if (this.state.password !== this.state.confirmedPassword){\r\n            alert('The confirmed password does not match the password');\r\n        }else{\r\n            //create the email and password in the firebase and redirect to the main page\r\n            auth.createUserWithEmailAndPassword(email, password).then((result) => {\r\n                window.location.replace('/main')\r\n            }).catch((error) => {\r\n                //error handling\r\n                alert(error.message)\r\n            })\r\n    \r\n            //update the state\r\n            auth.onAuthStateChanged((user) => {\r\n                this.setState({\r\n                    user\r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"registerPage\">\r\n                <div className=\"registerContent\">\r\n                    <div className=\"registerLogo\">\r\n                        <img src={registerLogo} alt=\"A calendar with a heart in the middle. Icon made by Free icons from www.freeicons.io\" />\r\n                    </div>\r\n\r\n                    <form action=\"GET\" className=\"registerForm\" onSubmit={this.submitRegister}>\r\n                        <h2>Hello Friend!</h2>\r\n                        <label htmlFor=\"email\">Emaill address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} ></input>\r\n\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}></input>\r\n\r\n                        <label htmlFor=\"confirmedPassword\">Confirmed Password</label>\r\n                        <input type=\"password\" id=\"confirmedPassword\" name=\"confirmedPassword\" value={this.state.confirmedPassword} onChange={this.handleChange}></input>\r\n\r\n                        <Link to=\"/login\">Already have an account? Sign in here!</Link>\r\n\r\n                        <button type=\"submit\">Register</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register","import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Time Logger</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","//need to figure out how to associate the data I passed to firebase and the email address from the log in page so that the user can actually use their own account.\r\nimport React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport Header from '../component/Header'\r\n\r\nclass Main extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            email: '',\r\n            listOfLogs: [],\r\n            day:  '',\r\n            startTime: '',\r\n            endTime: '',\r\n            note: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on('value', (response) => {\r\n            const dataFromDb = response.val();\r\n\r\n            const stateToBeSet = []\r\n\r\n            for (let key in dataFromDb) {\r\n                const logDetail = {\r\n                    key: key,\r\n                    log: dataFromDb[key]\r\n                }\r\n                stateToBeSet.push(logDetail)\r\n            }\r\n\r\n            this.setState({\r\n                listOfLogs: stateToBeSet\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    // after clicking the plus button, the log form shows up\r\n    newEventHandler = () => {\r\n        let logDetail = document.querySelector('.logDetail');\r\n        logDetail.classList.toggle('hide')\r\n}\r\n\r\n    // after clicking the clear all button\r\n    removeAll = () => {\r\n        const dbRef = firebase.database().ref();\r\n        \r\n        if (window.confirm(\"Do you really want to clear everything on your schedule?\")){\r\n            dbRef.remove();\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    //after clicking add log, state update\r\n    addLogHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (!this.state.day || !this.state.startTime || !this.state.endTime){\r\n            alert('You need to fill in the day, start time and the end time')\r\n        }else{\r\n            let log = {\r\n                \"email\": this.state.email,\r\n                \"day\": this.state.day,\r\n                \"startTime\": this.state.startTime,\r\n                \"endTime\": this.state.endTime,\r\n                \"note\": this.state.note,\r\n            }\r\n            \r\n            //push the data to the firebase\r\n            const dbRef = firebase.database().ref();\r\n            dbRef.push(log);\r\n            \r\n            //clear the note text input field\r\n            document.querySelector('.note').value = '';\r\n        }\r\n    }\r\n\r\n    \r\n    // when input change, record them\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    //grab the information from firebase and color corresponding cells\r\n    color = (listOfItem) => {\r\n        if (listOfItem.length > 0){\r\n            listOfItem.forEach((item) => {\r\n                const startTime = item.log.startTime;\r\n                const endTime = item.log.endTime;\r\n                const day = item.log.day\r\n                for (let duration = endTime - startTime - 1; duration >= 0; duration--) {\r\n                    let hour = Number(startTime) + duration\r\n                    document.querySelector('.cellNo' + hour + '-' + day).style.backgroundColor = \"#c5c1c0\";\r\n                    document.querySelector('.cellNo' + hour + '-' + day).innerHTML = item.log.note;\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        this.color(this.state.listOfLogs)\r\n\r\n        //generate cells\r\n        const appendCell = ((i, content)=>{\r\n            cellGenerator.push(\r\n                <div className = {`cellNo${i} cell`} key={i}>{content}</div>\r\n            )\r\n        })\r\n\r\n        //give the calendar column and row names\r\n        const cellGenerator = [];\r\n        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let counter = 8;\r\n        for (let i = 0; i <= 111; i++) {\r\n            if (1<=i && i<=7){\r\n                // add days of week in\r\n                appendCell(i, weekdays[(i-1)])\r\n            }\r\n            else{\r\n                //add time period in\r\n                if ( (i % 8 === 0 && i > 8)|| i === 8) {\r\n                    appendCell(i, `${counter}:00`)\r\n                    counter ++;\r\n                }\r\n                else{\r\n                    // give coordinates to each cell \r\n                    let x = Math.floor(i/8);\r\n                    let y = i % 8;\r\n                    appendCell(x + \"-\" + y, ``)\r\n                }\r\n            }\r\n        }\r\n\r\n        // add options for form \r\n        let formDateToApend = [];\r\n        const formDate = (weekdays) => {\r\n            for (let i = 0; i <= 6; i++){\r\n                formDateToApend.push(<option key={`${weekdays[i]}`} value={`${i + 1}`} >{weekdays[i]}</option>)\r\n            }\r\n        }\r\n        formDate(weekdays)\r\n\r\n        let startTimeToAppend = [];\r\n        const formStartTime = () => {\r\n            for (let i = 1; i <= 13; i++){\r\n                startTimeToAppend.push(<option key={`${i+7}`} value={`${i}`} >{i+7}</option>)\r\n            }\r\n        }\r\n        formStartTime()\r\n\r\n        let endTimeToAppend = [];\r\n        const formEndTime = () => {\r\n            for (let i = 1; i <= 13; i++) {\r\n                if ((i+1) > this.state.startTime){\r\n                    endTimeToAppend.push(<option key={`${i + 8}`} value={`${i+1}`} >{i + 8}</option>)\r\n                }\r\n            }\r\n        }\r\n        formEndTime()\r\n        \r\n        return(\r\n            <div className=\"mainContent\">\r\n                <Header />\r\n                <div className = \"calendar\">\r\n                    {cellGenerator.map((cell) => {\r\n                        return cell\r\n                    })\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"newLog\">\r\n                    <button className=\"newLogPlus\" onClick={this.newEventHandler}>+</button>\r\n                    <label className=\"visuallyhidden\">add a log</label>\r\n                </div>\r\n                <div className=\"clearAll\">\r\n                    <button className=\"clear\" onClick={this.removeAll}>Clear</button>\r\n                </div>\r\n\r\n                <div className=\"logDetail hide\">\r\n                    <h2>Add log</h2>\r\n                    {/* form start here */}\r\n                    <form action=\"GET\" onSubmit={this.addLogHandler} className=\"addLogForm\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <select onChange={this.handleChange} id=\"day\" name=\"day\" value={this.state.day} required>\r\n                            <option value=\"\">A day of the week</option>\r\n                            {\r\n                                formDateToApend.map((day) => {\r\n                                    return day\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"statTime\">Start time</label>\r\n                        <select onChange={this.handleChange} id=\"startTime\" name=\"startTime\" value={this.state.startTime} required>\r\n                            <option value=\"\">Start time</option>\r\n                            {\r\n                                startTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"endTime\">End time</label>\r\n                        <select onChange={this.handleChange} id=\"endTime\" name=\"endTime\" value={this.state.endTime} required>\r\n                            <option value=\"\">End time</option>\r\n                            {\r\n                                endTimeToAppend.map((time) => {\r\n                                    return time\r\n                                })\r\n                            }\r\n                        </select>\r\n\r\n                        <label htmlFor=\"note\">Note</label>\r\n                        <input type=\"text\" name=\"note\" className=\"note\" value={this.state.note} onChange={this.handleChange} maxLength=\"15\"/>\r\n\r\n                        <button className=\"addLog\" htmlFor=\"submit\" onClick={this.addLogHandler} >Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport './index.css'\n\nimport Home from './component/Home';\nimport Login from './component/Login';\nimport Register from './component/Register';\nimport Header from './component/Header';\nimport Main from './component/Main'\n\nclass App extends Component {\n  render(){\n    return (\n      <Router basename=\"/\">\n        <div className=\"App\">\n          {/* <Switch> */}\n            <Route path='/login' component={Login} />\n            <Route path='/register' component={Register} />\n            <Route path='/main' component={Main} />\n            <Route path='/' component={Home} />\n          {/* </Switch> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}